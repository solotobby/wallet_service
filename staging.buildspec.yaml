version: 0.2
env:
  variables:
    S3_ENVIRONMENT_BUCKET: "bm-environment-variables"
    Project: "base"
    Service: "wallet-service"
    ENVIRONMENT_FILE: ".env.staging"
phases:
  install:
    commands:
      - |
        #Update
        apt-get update
        # Install SQLITE3
        apt-get install -y sqlite3
        #Install composer
        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        php composer-setup.php ;
        php -r "unlink('composer-setup.php');" ;
        mv composer.phar /usr/local/bin/composer
      - echo logging in to Amazon ECR\
      - aws --version
      - echo $AWS_DEFAULT_REGION
      - RUNTIME_REPOSITORY_URI=559336548740.dkr.ecr.eu-west-1.amazonaws.com/base-wallet-runtime
      - WEBSERVER_REPOSITORY_URL=559336548740.dkr.ecr.eu-west-1.amazonaws.com/base-wallet-webserver
      - CRON_REPOSITORY_URL=559336548740.dkr.ecr.eu-west-1.amazonaws.com/base-wallet-cron
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SERVICE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=staging}
      - aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 559336548740.dkr.ecr.eu-west-1.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      - aws s3 cp s3://${S3_ENVIRONMENT_BUCKET}/${Project}/${Service}/${ENVIRONMENT_FILE} .env
      - echo commit hash $COMMIT_HASH
      - echo Installing composer deps
      - composer update --ignore-platform-reqs
      - composer dump-autoload
      - aws s3 cp s3://bm-environment-variables/monnyme-remit/monnyremit-api/docker.key docker.key
      - docker login -u bmafricadev --password-stdin < docker.key
      - docker build -t $RUNTIME_REPOSITORY_URI:staging .
      - docker tag $RUNTIME_REPOSITORY_URI:staging $RUNTIME_REPOSITORY_URI:$IMAGE_TAG
      - docker build -t $WEBSERVER_REPOSITORY_URL:staging -f Dockerfile_Nginx .
      - docker tag $WEBSERVER_REPOSITORY_URL:staging $WEBSERVER_REPOSITORY_URL:$IMAGE_TAG
      - docker build -t $CRON_REPOSITORY_URL:staging -f cron.dockerfile .
      - docker tag $CRON_REPOSITORY_URL:staging $CRON_REPOSITORY_URL:$IMAGE_TAG
  #      - touch database/database.sqlite
  #      - php artisan migrate --database=sqlite --force
  post_build:
    commands:
      - echo Build completed on `date`
      - docker push $RUNTIME_REPOSITORY_URI:staging
      - docker push $RUNTIME_REPOSITORY_URI:$IMAGE_TAG
      - docker push $WEBSERVER_REPOSITORY_URL:staging
      - docker push $WEBSERVER_REPOSITORY_URL:$IMAGE_TAG
      - docker push $CRON_REPOSITORY_URL:staging
      - docker push $CRON_REPOSITORY_URL:$IMAGE_TAG
      - echo creating image definition
      - >
        printf '[{"name": "webserver", "imageUri": "%s", "portMappings": [{ ":hostPort": 80} ]}, {"name": "runtime", "imageUri": "%s", "portMappings": [{ "hostPort": 9000 }]}, {"name": "cron", "imageUri": "%s", "portMappings": [{ "hostPort": 9000 }]}]' $RUNTIME_REPOSITORY_URI:$IMAGE_TAG $WEBSERVER_REPOSITORY_URL:$IMAGE_TAG $CRON_REPOSITORY_URL:$IMAGE_TAG > imageDefinition.json
      - echo migrating database
      - php artisan migrate --force
      - echo Clear cache
      - php artisan cache:clear
      - echo Refresh composer
      - composer dump-autoload
      # Do you need to do this? In many cases phpunit will use sqlite or similar to avoid the need for a real DB.
      # If you don't need it delete it
      # - /usr/bin/mysql  -u root -e "GRANT ALL ON *.* TO 'test'@'localhost' IDENTIFIED BY '' WITH GRANT OPTION"
      # - mysqladmin -u test create test
#      - ./vendor/bin/phpunit
artifacts:
  files: imageDefinition.json
